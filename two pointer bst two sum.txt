import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int val) {
        this.val = val;
        left = right = null;
    }
}

public class TwoSumInBST {

    // Function to perform in-order traversal of the BST
    private static void inOrderTraversal(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        inOrderTraversal(root.left, list);  // Traverse left subtree
        list.add(root.val);                 // Visit node
        inOrderTraversal(root.right, list); // Traverse right subtree
    }

    // Function to find if there is a pair with sum equal to target
    public static boolean findTwoSum(TreeNode root, int target) {
        List<Integer> sortedList = new ArrayList<>();
        inOrderTraversal(root, sortedList);  // Get sorted elements in the BST
        
        // Two pointer approach
        int left = 0, right = sortedList.size() - 1;
        while (left < right) {
            int currentSum = sortedList.get(left) + sortedList.get(right);
            if (currentSum == target) {
                return true;  // Pair found
            } else if (currentSum < target) {
                left++;  // Increase the sum by moving left pointer to the right
            } else {
                right--; // Decrease the sum by moving right pointer to the left
            }
        }
        return false;  // No pair found
    }

    public static void main(String[] args) {
        // Constructing a simple BST
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(6);
        root.left.left = new TreeNode(2);
        root.left.right = new TreeNode(4);
        root.right.right = new TreeNode(7);

        int target = 9;
        boolean result = findTwoSum(root, target);
        System.out.println("Two sum found: " + result);
    }
}
