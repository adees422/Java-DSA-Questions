import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        left = right = null;
    }
}

 class BurnTree {

    public int minTimeToBurn(TreeNode root, int target) {
        if (root == null) return 0;

        // Map to keep track of parent nodes
        HashMap<TreeNode, TreeNode> parentMap = new HashMap<>();
        TreeNode targetNode = mapParents(root, parentMap, target);

        // BFS queue
        Queue<TreeNode> queue = new LinkedList<>();
        HashSet<TreeNode> visited = new HashSet<>();

        queue.add(targetNode);
        visited.add(targetNode);

        int time = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean burnedAnyNode = false;

            for (int i = 0; i < size; i++) {
                TreeNode current = queue.poll();

                // Check left child
                if (current.left != null && !visited.contains(current.left)) {
                    queue.add(current.left);
                    visited.add(current.left);
                    burnedAnyNode = true;
                }

                // Check right child
                if (current.right != null && !visited.contains(current.right)) {
                    queue.add(current.right);
                    visited.add(current.right);
                    burnedAnyNode = true;
                }

                // Check parent
                TreeNode parent = parentMap.get(current);
                if (parent != null && !visited.contains(parent)) {
                    queue.add(parent);
                    visited.add(parent);
                    burnedAnyNode = true;
                }
            }

            // Increment time if any node burned this level
            if (burnedAnyNode) time++;
        }

        return time;
    }

    private TreeNode mapParents(TreeNode root, HashMap<TreeNode, TreeNode> parentMap, int target) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        TreeNode targetNode = null;

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();

            if (current.val == target) {
                targetNode = current;
            }

            if (current.left != null) {
                parentMap.put(current.left, current);
                queue.add(current.left);
            }

            if (current.right != null) {
                parentMap.put(current.right, current);
                queue.add(current.right);
            }
        }

        return targetNode;
    }

    public static void main(String[] args) {
        BurnTree tree = new BurnTree();

        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.right.left = new TreeNode(5);
        root.right.right = new TreeNode(6);
        root.left.left.right=new TreeNode(7);

        int target = 2;
        int timeToBurn = tree.minTimeToBurn(root, target);

        System.out.println("Minimum time to burn the tree from target node " + target + " is: " + timeToBurn);
    }
}
