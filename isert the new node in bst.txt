class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BST {
    public static Node insertNewNode(Node root, int key) {
        if (root == null) return new Node(key);

        Node cur = root;
        while (cur!=null) {
            if (key <= cur.data) {
                if (cur.left != null) {
                    cur = cur.left;
                } else {
                    cur.left = new Node(key);
                    break;
                }
            } else {
                if (cur.right != null) {
                    cur = cur.right;
                } else {
                    cur.right = new Node(key);
                    break;
                }
            }
        }
        return root;
    }

    public static void print(Node root) {
        if (root == null) return;
        print(root.left);
        System.out.print(root.data + " ");
        print(root.right);
    }

    public static void main(String[] args) {
        Node root = new Node(10);
        root.left = new Node(5);
        root.right = new Node(13);
        root.left.left = new Node(3);
        root.left.left.left = new Node(2);
        root.left.left.right = new Node(4);
        root.left.right = new Node(6);
        root.left.right.right = new Node(9);
        root.right.left = new Node(11);
        root.right.right = new Node(14);

        System.out.println("Inorder traversal before insertion:");
        print(root);

        int keyToInsert = 8;
        root = insertNewNode(root, keyToInsert);
        System.out.println("\nInorder traversal after inserting " + keyToInsert + ":");
        print(root);
    }
}