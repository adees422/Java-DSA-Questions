import java.util.HashMap;

public class LongestRepeatingCharacterReplacement {

    public static int characterReplacement(String s, int k) {
        int maxLength = 0;

        // Check for each character from 'A' to 'Z'
        for (char targetChar = 'A'; targetChar <= 'Z'; targetChar++) {
            maxLength = Math.max(maxLength, getMaxLengthForChar(s, targetChar, k));
        }

        return maxLength;
    }

    private static int getMaxLengthForChar(String s, char targetChar, int k) {
        HashMap<Character, Integer> charCountMap = new HashMap<>();
        int start = 0;
        int maxLength = 0;
        int maxCount = 0; // Max frequency of the current targetChar in the window

        for (int end = 0; end < s.length(); end++) {
            char endChar = s.charAt(end);
            charCountMap.put(endChar, charCountMap.getOrDefault(endChar, 0) + 1);

            if (endChar == targetChar) {
                maxCount++;
            }

            // Window size minus number of targetChar should be within k
            int currentWindowSize = end - start + 1;
            if (currentWindowSize - maxCount > k) {
                char startChar = s.charAt(start);
                charCountMap.put(startChar, charCountMap.get(startChar) - 1);
                if (startChar == targetChar) {
                    maxCount--;
                }
                start++;
            }

            maxLength = Math.max(maxLength, end - start + 1);
        }

        return maxLength;
    }

    public static void main(String[] args) {
        String s = "AABABBA";
        int k = 1;
        System.out.println("Longest length after replacement: " + characterReplacement(s, k));
    }
}
